name: 'publish'

on:
  push:
    branches:
      - cf

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            executor_file_name: 'seajob-executor-macos-arm64'
            bundle_dir: './src-tauri/target/aarch64-apple-darwin/release/bundle/macos'
          # - platform: 'macos-latest'
          #   args: '--target x86_64-apple-darwin'
          #   executor_file_name: 'seajob-executor-macos-x64'
          #   bundle_dir: './src-tauri/target/x86_64-apple-darwin/release/bundle/macos'
          # - platform: 'windows-latest'
          #   args: ''
          #   executor_file_name: 'seajob-executor-windows-x64.exe'
          #   bundle_dir: './src-tauri/target/release/bundle/windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout another repository and branch
        uses: actions/checkout@v4
        with:
          repository: sparkbridgelimit/seajob-client
          ref: deploy

      # 在非 Windows 系统使用 jq 读取版本号
      - name: Read version from tauri.conf.json (Non-Windows)
        if: runner.os != 'Windows'
        run: |
          VERSION=$(jq -r '.package.version' src-tauri/tauri.conf.json)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
        shell: bash
      
      # 在 Windows 系统使用 PowerShell 读取版本号
      - name: Read version from tauri.conf.json (Windows)
        if: runner.os == 'Windows'
        run: |
          $json = Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json
          echo "VERSION=$($json.package.version)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Remove all resources from src-tauri/resources (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          Remove-Item -Recurse -Force src-tauri/resources/*
        shell: pwsh

      - name: Remove all resources from src-tauri/resources (Non-Windows)
        if: ${{ runner.os != 'Windows' }}
        run: |
          rm -rf src-tauri/resources/*
        shell: bash
    
      - name: Update tauri.conf.json (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          $json = Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json
          $json.tauri.bundle.resources = @("resources/${{ matrix.executor_file_name }}")
          $json | ConvertTo-Json -Compress -Depth 100 | Set-Content src-tauri/tauri.conf.json
        shell: pwsh

      - name: Update tauri.conf.json (Non-Windows)
        if: ${{ runner.os != 'Windows' }}
        run: |
          jq '.tauri.bundle.resources = ["resources/${{ matrix.executor_file_name }}"]' src-tauri/tauri.conf.json > src-tauri/tauri.conf.tmp.json
          mv src-tauri/tauri.conf.tmp.json src-tauri/tauri.conf.json
        shell: bash
      
      - uses: robinraju/release-downloader@v1
        with:
          repository: 'sparkbridgelimit/seajob-executor'
          latest: true
          fileName: ${{ matrix.executor_file_name }}
          out-file-path: 'src-tauri/resources'

      - name: Enable corepack
        run: corepack enable

      - name: install Rust stable 1.80
        uses: dtolnay/rust-toolchain@1.80
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - name: Build Vite + Tauri
        run: pnpm build

      - uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          tagName: __VERSION__
          releaseName: '海投助手 v__VERSION__'
          releaseBody: 'See the assets to download this version and install. '
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      - uses: robinraju/release-downloader@v1
        with:
          repository: 'sparkbridgelimit/seajob-client-release'
          out-file-path: './releases-assets'  # 将下载的文件存储到独立目录
          tag: ${{ env.VERSION }}

      - name: List release assets (debug)
        run: |
          ls -la ./releases-assets


      - uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: 'releases-assets'
          destination-dir: ./release/${{ env.VERSION }}/${{ matrix.executor_file_name }}
